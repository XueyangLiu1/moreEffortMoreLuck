syntax = "proto3";

// ************************Message Type************************
message SCmsg {
    repeated IdCreateResponse idCreateResponse = 1;
    repeated RoomCreateResponse roomCreateResponse = 2;
    repeated RoomJoinResponse roomJoinResponse = 3;
    repeated JoinerReadyResponse joinerReadyResponse = 4;
    repeated OwnerStartGameResponse ownerStartGameResponse = 5;
    repeated RoomStatusResponse roomStatusResponse = 6;
    repeated GameStartInform gameStartInform = 7;
}

// ************************Constants************************
enum Status {
    SUCCESS = 0;
    FAILURE = 1;
}

// ************************Pregame Preparation************************
// response for IdCreateRequest
message IdCreateResponse {
    // 0 for success, 1 for failure
    Status status = 1;
    // empty str for success
    string fail_reason = 2;
} 

// response for RoomCreateRequest
message RoomCreateResponse {
    // 0 for success, 1 for failure
    Status status = 1;
    // 6-digit numbers mixed with letters, 
    // empty str for failure
    string room_code = 2;
    string room_owner_name = 3;
    // empty str for success
    string fail_reason = 4;
}

// response for RoomJoinRequest
message RoomJoinResponse {
    // 0 for success, 1 for failure
    Status status= 1;
    string room_owner_name = 2;
    // empty str for success
    string fail_reason = 3;
}

// response for GameStartRequest
message JoinerReadyResponse {
    // 0 for success, 1 for failure
    Status status = 1;
    // empty str for success
    string fail_reason = 2;
}

message OwnerStartGameResponse {
    // 0 for success, 1 for failure
    Status status = 1;
    // empty str for success
    string fail_reason = 2;
}

// inform player the room status
// both after people join and people ready to start
message RoomStatusResponse {
    string room_status = 1;
}

// Inform the start of game
message GameStartInform {
}

// // ************************Basic round************************
// // inform the player for his/her round
// message RoundStartInform {
//     int32 player_index = 1;
//     int32 round_num = 2;
// }

// // reply the RollDiceRequest with a roll result
// message RollDiceResponse {
//     int32 player_index = 1;
//     int32 roll_result = 2;
// }

// // update the player with the latest board situation
// message BoardUpdate {
//     int32 player_index = 1;
//     string board_json = 2;
// }

// // ack the RoundCommitRequest
// message RoundCommitAck {
//     int32 player_index = 1;
//     int32 round_num = 2;
// }

// // ************************Transaction related************************
// // inform the receiver about the transaction request
// message TransactionInform {
//     string transaction_identifier = 1;// sender#receiver#UTC-Timestamp
//     int32 sender_player_index = 2;
//     int32 receiver_player_index = 3;
//     string sender_item = 4;
//     string receiver_item = 5;
// }

// // send to both the requester and accepter when transaction is confirmed
// message TransactionConfirm {
//     string transaction_identifier = 1;
// }

// // send to both the requester and accepter when transaction is rejected
// message TransactionAbandon {
//     string transaction_identifier = 1;
// }