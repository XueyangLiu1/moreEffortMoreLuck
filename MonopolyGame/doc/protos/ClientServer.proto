syntax = "proto3";

// ************************Message Type************************
message CSmsg {
    repeated IdCreateRequest idCreateRequest = 1;
    repeated RoomCreateRequest roomCreateRequest = 2;
    repeated RoomJoinRequest roomJoinRequest = 3;
    repeated JoinerReadyRequest joinerReadyRequest = 4;
    repeated OwnerStartGameRequest ownerStartGameRequest = 5;
    repeated RoomStatusRequest roomStatusRequest = 6;
}

// ************************Constants************************
enum Status {
    SUCCESS = 0;
    FAILURE = 1;
}

// ************************Pregame Preparation************************

message IdCreateRequest {
    string player_name = 1;
}

// ask server to create a room for a number of players
message RoomCreateRequest {
    string player_name = 1;
}

// send room code to join the room
message RoomJoinRequest {
    string player_name = 1;
    string room_code = 2;
}

// send to get ready for the game, joiners in room should send
message JoinerReadyRequest {
    string player_name = 1;
    string room_code = 2;
}

// send to start the game, owners can send only others all ready
message OwnerStartGameRequest {
    string player_name = 1;
    string room_code = 2;
}

message RoomStatusRequest {
    string player_name = 1;
    string room_code = 2;
}

// // ************************Basic round************************
    // set personal goals
    // int32 joy_goal = 2;
    // int32 wealth_goal = 3;
    // int32 fame_goal = 4;

// // ack the RoundStartInform
// message RoundStartAck {
//     int32 player_index = 1;
//     int32 round_num = 2;
// }

// // ask the server to roll dice
// message RollDiceRequest {
//     int32 player_index = 1;
// }

// // ask the server for board update, use only when needed
// message BoardUpdateRequest {
//     int32 player_index = 1;
// }

// // commit the current round
// message RoundCommitRequest {
//     int32 player_index = 1;
//     int32 round_num = 2;
// }

// // ************************Transaction related************************
// // request a transaction with another player
// message TransactionRequest {
//     string transaction_identifier = 1;// sender#receiver#UTC-Timestamp
//     int32 sender_player_index = 2;
//     int32 receiver_player_index = 3;
//     string sender_item = 4;
//     string receiver_item = 5;
// }

// // accept a transaction from another player
// message TransactionAccept {
//     string transaction_identifier = 1;
// }

// // reject a transaction from another player
// message TransactionReject {
//     string transaction_identifier = 1;
// }
